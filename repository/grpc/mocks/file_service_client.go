// Code generated by MockGen. DO NOT EDIT.
// Source: filepb/file_grpc.pb.go

// Package mock_filepb is a generated GoMock package.
package mock_filepb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	filepb "github.com/xoltawn/simple-file-storage/repository/grpc/filepb"
	grpc "google.golang.org/grpc"
)

// MockFileServiceClient is a mock of FileServiceClient interface.
type MockFileServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockFileServiceClientMockRecorder
}

// MockFileServiceClientMockRecorder is the mock recorder for MockFileServiceClient.
type MockFileServiceClientMockRecorder struct {
	mock *MockFileServiceClient
}

// NewMockFileServiceClient creates a new mock instance.
func NewMockFileServiceClient(ctrl *gomock.Controller) *MockFileServiceClient {
	mock := &MockFileServiceClient{ctrl: ctrl}
	mock.recorder = &MockFileServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileServiceClient) EXPECT() *MockFileServiceClientMockRecorder {
	return m.recorder
}

// DownloadFromTextFile mocks base method.
func (m *MockFileServiceClient) DownloadFromTextFile(ctx context.Context, in *filepb.DownloadFromTextFileRequest, opts ...grpc.CallOption) (*filepb.DownloadFromTextFileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadFromTextFile", varargs...)
	ret0, _ := ret[0].(*filepb.DownloadFromTextFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadFromTextFile indicates an expected call of DownloadFromTextFile.
func (mr *MockFileServiceClientMockRecorder) DownloadFromTextFile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFromTextFile", reflect.TypeOf((*MockFileServiceClient)(nil).DownloadFromTextFile), varargs...)
}

// FetchFiles mocks base method.
func (m *MockFileServiceClient) FetchFiles(ctx context.Context, in *filepb.FetchFilesRequest, opts ...grpc.CallOption) (*filepb.FetchFilesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchFiles", varargs...)
	ret0, _ := ret[0].(*filepb.FetchFilesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFiles indicates an expected call of FetchFiles.
func (mr *MockFileServiceClientMockRecorder) FetchFiles(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFiles", reflect.TypeOf((*MockFileServiceClient)(nil).FetchFiles), varargs...)
}

// MockFileServiceServer is a mock of FileServiceServer interface.
type MockFileServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockFileServiceServerMockRecorder
}

// MockFileServiceServerMockRecorder is the mock recorder for MockFileServiceServer.
type MockFileServiceServerMockRecorder struct {
	mock *MockFileServiceServer
}

// NewMockFileServiceServer creates a new mock instance.
func NewMockFileServiceServer(ctrl *gomock.Controller) *MockFileServiceServer {
	mock := &MockFileServiceServer{ctrl: ctrl}
	mock.recorder = &MockFileServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileServiceServer) EXPECT() *MockFileServiceServerMockRecorder {
	return m.recorder
}

// DownloadFromTextFile mocks base method.
func (m *MockFileServiceServer) DownloadFromTextFile(arg0 context.Context, arg1 *filepb.DownloadFromTextFileRequest) (*filepb.DownloadFromTextFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFromTextFile", arg0, arg1)
	ret0, _ := ret[0].(*filepb.DownloadFromTextFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadFromTextFile indicates an expected call of DownloadFromTextFile.
func (mr *MockFileServiceServerMockRecorder) DownloadFromTextFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFromTextFile", reflect.TypeOf((*MockFileServiceServer)(nil).DownloadFromTextFile), arg0, arg1)
}

// FetchFiles mocks base method.
func (m *MockFileServiceServer) FetchFiles(arg0 context.Context, arg1 *filepb.FetchFilesRequest) (*filepb.FetchFilesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFiles", arg0, arg1)
	ret0, _ := ret[0].(*filepb.FetchFilesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFiles indicates an expected call of FetchFiles.
func (mr *MockFileServiceServerMockRecorder) FetchFiles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFiles", reflect.TypeOf((*MockFileServiceServer)(nil).FetchFiles), arg0, arg1)
}

// MockUnsafeFileServiceServer is a mock of UnsafeFileServiceServer interface.
type MockUnsafeFileServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeFileServiceServerMockRecorder
}

// MockUnsafeFileServiceServerMockRecorder is the mock recorder for MockUnsafeFileServiceServer.
type MockUnsafeFileServiceServerMockRecorder struct {
	mock *MockUnsafeFileServiceServer
}

// NewMockUnsafeFileServiceServer creates a new mock instance.
func NewMockUnsafeFileServiceServer(ctrl *gomock.Controller) *MockUnsafeFileServiceServer {
	mock := &MockUnsafeFileServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeFileServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeFileServiceServer) EXPECT() *MockUnsafeFileServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedFileServiceServer mocks base method.
func (m *MockUnsafeFileServiceServer) mustEmbedUnimplementedFileServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFileServiceServer")
}

// mustEmbedUnimplementedFileServiceServer indicates an expected call of mustEmbedUnimplementedFileServiceServer.
func (mr *MockUnsafeFileServiceServerMockRecorder) mustEmbedUnimplementedFileServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFileServiceServer", reflect.TypeOf((*MockUnsafeFileServiceServer)(nil).mustEmbedUnimplementedFileServiceServer))
}
